name: GitScaffold Project Roadmap
description: A tool to manage GitHub projects using declarative roadmap files, with AI-powered issue enrichment and creation.

milestones:
  - name: v0.1 Foundation (CLI & Basic Parsing)
    due_date: 2025-08-01
  - name: v0.2 GitHub Integration
    due_date: 2025-09-01
  - name: v0.3 AI Features (Extraction & Enrichment)
    due_date: 2025-10-01
  - name: v0.4 Advanced Features & Usability
    due_date: 2025-11-01
  - name: v1.0 Stable Release
    due_date: 2025-12-01
  - name: Post v1.0 Enhancements
    due_date: 2026-01-01

features:
  - title: Core CLI Framework
    description: Setup basic CLI structure and command handling for gitscaffold.
    milestone: v0.1 Foundation (CLI & Basic Parsing)
    labels: [core, cli]
    assignees: []
    tasks:
      - title: Implement main CLI group using Click
        description: Establish the main entry point and command structure for the CLI using the Click library. This will be based on `scaffold/cli.py` and `gitscaffold.py`.
        labels: [implementation]
        assignees: []
      - title: Implement `init` command
        description: Develop the `init` command to generate a template roadmap file. This is based on the functionality in `gitscaffold.py::init`.
        labels: [implementation, cli]
        assignees: []

  - title: Roadmap Parsing and Validation
    description: Implement logic to parse roadmap files (YAML/Markdown) and validate their structure and content.
    milestone: v0.1 Foundation (CLI & Basic Parsing)
    labels: [core, parser, validator]
    assignees: []
    tasks:
      - title: Implement Markdown/YAML parser for roadmap
        description: Create parsing functions for roadmap files, supporting both Markdown and YAML formats. Based on `scaffold/parser.py::parse_roadmap` and `parse_markdown`.
        labels: [implementation, parser]
        assignees: []
      - title: Implement Pydantic models for validation
        description: Define Pydantic models for roadmap elements (Roadmap, Milestone, Feature, Task) to ensure data integrity. Based on `scaffold/validator.py`.
        labels: [implementation, validator]
        assignees: []

  - title: GitHub Integration
    description: Develop functionality to interact with the GitHub API for creating and managing milestones and issues.
    milestone: v0.2 GitHub Integration
    labels: [core, github]
    assignees: []
    tasks:
      - title: Implement GitHub client wrapper
        description: Create a robust client for GitHub API interactions, encapsulating PyGitHub calls. Based on `scaffold/github.py::GitHubClient`.
        labels: [implementation, api-integration]
        assignees: []
      - title: Implement `create` command
        description: Build the `create` command to process a roadmap file and create corresponding milestones and issues on GitHub. Based on `scaffold/cli.py::create`.
        labels: [implementation, cli]
        assignees: []
      - title: Implement `setup` command (from gitscaffold.py)
        description: Port and integrate the `setup` command functionality for initializing a repository with predefined labels and milestones. Based on `gitscaffold.py::setup` and `scripts/github_setup.py`.
        labels: [implementation, cli, github]
        assignees: []
      - title: Implement `delete-closed` command (from gitscaffold.py)
        description: Port and integrate the `delete-closed` command. Based on `gitscaffold.py::delete-closed`.
        labels: [implementation, cli, github]
        assignees: []

  - title: AI-Powered Features
    description: Integrate AI/LLM capabilities for extracting issues from Markdown and enriching issue descriptions.
    milestone: v0.3 AI Features (Extraction & Enrichment)
    labels: [ai, enhancement]
    assignees: []
    tasks:
      - title: Implement API key management for AI
        description: Securely retrieve and manage API keys for AI services. Based on `scaffold/ai.py::_get_api_key`.
        labels: [implementation, security]
        assignees: []
      - title: Implement issue extraction from Markdown
        description: Use an LLM to parse unstructured Markdown and extract potential issues. Based on `scaffold/ai.py::extract_issues_from_markdown`.
        labels: [implementation, ai]
        assignees: []
      - title: Implement issue description enrichment
        description: Use an LLM to enhance or generate issue descriptions based on a title and context. Based on `scaffold/ai.py::enrich_issue_description`.
        labels: [implementation, ai]
        assignees: []
      - title: Integrate AI extraction into `create` command
        description: Add an `--ai-extract` option to the `create` command to use LLM-based issue extraction from a Markdown roadmap. Link to `scaffold/cli.py::create`.
        labels: [integration, cli, ai]
        assignees: []
      - title: Integrate AI enrichment into `create` command
        description: Add an `--ai-enrich` option to the `create` command to use LLM-based description enrichment. Link to `scaffold/cli.py::create`.
        labels: [integration, cli, ai]
        assignees: []
      - title: Implement `enrich` command (from gitscaffold.py)
        description: Port and integrate the `enrich` command for AI-powered enrichment of issues. Based on `gitscaffold.py::enrich` and `scripts/enrich.py`.
        labels: [implementation, cli, ai]
        assignees: []
      - title: Support configurable OpenAI models
        description: Allow users to specify the OpenAI model (e.g., gpt-4o, gpt-3.5-turbo) for all AI operations (extraction, enrichment) via CLI options (e.g., --openai-model) and the OPENAI_MODEL environment variable.
        labels: [enhancement, ai, configuration]
        assignees: []

  - title: Testing Framework and Coverage
    description: Establish and maintain a comprehensive testing suite for the application.
    milestone: v0.4 Advanced Features & Usability
    labels: [testing, quality]
    assignees: []
    tasks:
      - title: Setup Pytest environment and fixtures
        description: Configure Pytest with necessary plugins, and create shared fixtures (e.g., for mocking GitHub API, LLM API, temporary file paths).
        labels: [setup, testing]
        assignees: []
      - title: Develop unit tests for parser module
        description: Write unit tests for all functions in `scaffold/parser.py`.
        labels: [testing, unit-test]
        assignees: []
      - title: Develop unit tests for validator module
        description: Write unit tests for Pydantic models and validation logic in `scaffold/validator.py`.
        labels: [testing, unit-test]
        assignees: []
      - title: Develop unit/integration tests for GitHub client
        description: Test `scaffold/github.py` thoroughly using mocked GitHub API responses. (Refers to `tests/test_github.py` for inspiration).
        labels: [testing, unit-test, integration-test]
        assignees: []
      - title: Develop unit/integration tests for AI module
        description: Test `scaffold/ai.py` using mocked LLM API responses. (Refers to `tests/test_import_md.py` for inspiration on mocking AI).
        labels: [testing, unit-test, integration-test]
        assignees: []
      - title: Develop integration tests for CLI commands
        description: Create end-to-end tests for each CLI command, mocking external services (GitHub, AI). Use Click's `CliRunner`.
        labels: [testing, integration-test]
        assignees: []
      - title: Achieve and maintain target test coverage
        description: Aim for a high test coverage percentage (e.g., 85%+) and integrate coverage reporting into CI.
        labels: [quality, testing]
        assignees: []
      - title: Implement tests for `scripts/import_md.py` (if kept separate)
        description: Ensure robust tests for the Markdown import script. Based on `tests/test_import_md.py`.
        labels: [testing, script]
        assignees: []

  - title: Documentation
    description: Create and maintain comprehensive documentation for users and developers.
    milestone: v0.4 Advanced Features & Usability
    labels: [documentation]
    assignees: []
    tasks:
      - title: Write comprehensive README.md
        description: Include project overview, features, installation instructions, quick start guide, and basic usage examples.
        labels: [documentation]
        assignees: []
      - title: Document roadmap file format
        description: Provide a detailed specification of the roadmap file structure (YAML/Markdown), including all fields, their types, and whether they are required or optional.
        labels: [documentation]
        assignees: []
      - title: Document all CLI commands and options
        description: Generate or write detailed help text and usage examples for each CLI command and all its options.
        labels: [documentation]
        assignees: []
      - title: Create example roadmap files
        description: Develop a diverse set of example roadmap files showcasing different features and use cases. This should include examples for structured YAML, structured Markdown (similar to `docs/example_roadmap.md` and `gitscaffold init` output), and unstructured Markdown suitable for AI extraction (`import-md` command).
        labels: [documentation, example]
        assignees: []
      - title: Write developer documentation
        description: Include information on project structure, development setup, contribution guidelines, how to run tests, and coding conventions.
        labels: [documentation, contributing]
        assignees: []

  - title: CI/CD and Release Management
    description: Automate testing, building, and publishing of the `gitscaffold` package.
    milestone: v1.0 Stable Release
    labels: [ci-cd, release]
    assignees: []
    tasks:
      - title: Setup GitHub Actions for CI
        description: Configure workflows to run linters (e.g., Ruff, Black) and execute the test suite on every push and pull request. (Partially exists with `pypi-publish.yml`, `release.yml`).
        labels: [ci, automation]
        assignees: []
      - title: Automate PyPI publishing on release
        description: Enhance or confirm GitHub Actions workflow (`.github/workflows/pypi-publish.yml`) to build and publish the package to PyPI when a new release is tagged.
        labels: [release, automation, pypi]
        assignees: []
      - title: Automate GitHub Releases creation
        description: Enhance or confirm GitHub Actions workflow (`.github/workflows/release.yml`) to automatically create GitHub releases, potentially with generated changelogs.
        labels: [release, automation, github]
        assignees: []
      - title: Standardize versioning strategy
        description: Ensure consistent version management using `scaffold/__init__.py::__version__` (and `pyproject.toml`) and potentially tools like `bumpversion` or `poetry version`.
        labels: [release, versioning]
        assignees: []
      - title: Test and Maintain GitHub Action
        description: Ensure the GitHub Action defined in `action.yml` is well-tested and maintained. This includes testing its inputs (`roadmap-file`, `repo`, `github-token`, `dry-run`, `openai-key`, `apply`) and overall functionality.
        labels: [ci, github-action, testing]
        assignees: []

  - title: Advanced Roadmap Features (Post v1.0)
    description: Introduce more sophisticated features for roadmap management.
    milestone: Post v1.0 Enhancements
    labels: [enhancement, roadmap]
    assignees: []
    tasks:
      - title: Support for task dependencies
        description: Allow tasks within a roadmap to declare dependencies on other tasks (e.g., "Task B depends on Task A").
        labels: [feature, roadmap-v2]
        assignees: []
      - title: Support for GitHub issue templates
        description: Allow users to specify project-defined GitHub issue templates to be used when creating issues from features or tasks.
        labels: [feature, github-integration]
        assignees: []
      - title: Roadmap diffing and updating ("sync" command)
        description: Implement a command to compare the current state of GitHub issues/milestones with the roadmap file and report differences or apply updates.
        labels: [feature, cli, github-sync]
        assignees: []
      - title: Option for sub-tasks as checklist items
        description: Provide an option (e.g., per feature or globally) to create tasks as checklist items within the body of their parent feature's issue, rather than separate issues.
        labels: [feature, github-integration, usability]
        assignees: []

  - title: Extensibility and Configuration (Post v1.0)
    description: Enhance the tool's flexibility through better configuration and a plugin architecture.
    milestone: Post v1.0 Enhancements
    labels: [enhancement, configuration, extensibility]
    assignees: []
    tasks:
      - title: Global and project-level configuration file
        description: Allow users to define default settings (e.g., GitHub repository, token path, default AI model, common labels) in a configuration file (`~/.gitscaffold/config.yml` or `.gitscaffold.yml` in project).
        labels: [feature, usability, configuration]
        assignees: []
      - title: Basic plugin system
        description: Design and implement a plugin system allowing users to extend `gitscaffold` with custom logic (e.g., new roadmap formats, custom actions after issue creation).
        labels: [feature, extensibility, architecture]
        assignees: []

  - title: User Interface (Potential Future Direction)
    description: Explore the possibility of a graphical user interface for roadmap management.
    milestone: Post v1.0 Enhancements
    labels: [ui, future-scope]
    assignees: []
    tasks:
      - title: Research UI options and design mockups
        description: Investigate suitable UI frameworks (e.g., Streamlit, TUI with Textual, web app with Flask/FastAPI + Svelte/React) and create initial design mockups.
        labels: [design, research, ui]
        assignees: []
      - title: Develop a prototype UI
        description: Implement a minimal viable product for the UI, focusing on roadmap visualization and basic editing capabilities.
        labels: [implementation, ui, prototype]
        assignees: []

  - title: Code Refactoring and Maintainability (Ongoing)
    description: Continuously improve the codebase for clarity, efficiency, and ease of maintenance.
    milestone: Post v1.0 Enhancements # Or as an ongoing activity across all milestones
    labels: [refactor, quality, technical-debt]
    assignees: []
    tasks:
      - title: Refactor `scripts/` functionalities into core CLI
        description: Systematically integrate the logic from standalone scripts (`scripts/github_setup.py`, `scripts/enrich.py`, `scripts/import_md.py`) into the main `scaffold/cli.py` as subcommands or options.
        labels: [refactor, cli, architecture]
        assignees: []
      - title: Consolidate `gitscaffold.py` and `scaffold/cli.py` entry points
        description: Review the two main CLI entry points (`gitscaffold.py` at root and `scaffold/cli.py`). If redundant, merge them into a single, clear entry point. Otherwise, clarify their distinct roles.
        labels: [refactor, cli, architecture]
        assignees: []
      - title: Improve error handling and user feedback
        description: Enhance error reporting with more specific, user-friendly messages and suggestions for resolving common issues.
        labels: [usability, quality, error-handling]
        assignees: []
      - title: Enforce strict code style and linting
        description: Maintain high code quality by consistently applying linters (Ruff, Black) and type checking (Mypy) in CI.
        labels: [quality, tooling, ci]
        assignees: []
